name: Enforce English for issues/PRs
on:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  enforce:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            // ==== 可配置区（维护者白名单）====
            const MAINTAINERS = [
              // 在这里填允许使用中文的维护者 GitHub 用户名（可空）
              // 例如: 'henghuiding','shutinghe'
            ];
            const ORG = 'FudanCVL'; // 组织名（如不在 org 下可留空字符串）
            // ==== 语言检测：CJK（含中/日/韩 + 全角标点）====
            const CJK = /[\u2E80-\u2EFF\u3000-\u303F\u31C0-\u31EF\u3200-\u9FFF\uF900-\uFAFF\uFF00-\uFFEF]/;
            // 仅中文（更严格）：/[\u4E00-\u9FFF]/

            const isIssue = !!context.payload.issue;
            const isPR = !!context.payload.pull_request;
            const actor = context.actor;

            // 白名单：维护者、组织成员、协作者绕过
            if (MAINTAINERS.includes(actor)) return;

            async function isOrgMember(org, username) {
              if (!org) return false;
              try {
                const res = await github.rest.orgs.checkMembershipForUser({ org, username });
                return res.status === 204;
              } catch { return false; }
            }

            async function isRepoCollaborator(username) {
              const { owner, repo } = context.repo;
              try {
                const res = await github.rest.repos.checkCollaborator({ owner, repo, username });
                return res.status === 204;
              } catch { return false; }
            }

            const bypass = (await isOrgMember(ORG, actor)) || (await isRepoCollaborator(actor));
            if (bypass) return;

            const text = isIssue
              ? `${context.payload.issue.title}\n${context.payload.issue.body || ""}`
              : `${context.payload.pull_request.title}\n${context.payload.pull_request.body || ""}`;

            if (!CJK.test(text || "")) return; // 纯英文，放行

            const { owner, repo } = context.repo;

            // 确保标签存在
            async function ensureLabel(name, color, description) {
              try {
                await github.rest.issues.getLabel({ owner, repo, name });
              } catch {
                try {
                  await github.rest.issues.createLabel({ owner, repo, name, color, description });
                } catch {}
              }
            }
            await ensureLabel('non-english', 'B60205', 'Contains non-English text');

            const number = isIssue ? context.payload.issue.number : context.payload.pull_request.number;

            await github.rest.issues.addLabels({ owner, repo, issue_number: number, labels: ['non-english'] });
            await github.rest.issues.createComment({
              owner, repo, issue_number: number,
              body: [
                'English only please for this repository (**SynFMC**).',
                '',
                'This thread was flagged because it contains non-English text.',
                '',
                '请使用英文提交；如需保留中文，请附英文版本。'
              ].join('\n')
            });

            // Issue：直接关并锁帖；PR：仅提示与打标签（不强制关闭）
            if (isIssue) {
              await github.rest.issues.update({ owner, repo, issue_number: number, state: 'closed' });
              await github.rest.issues.lock({ owner, repo, issue_number: number, lock_reason: 'off-topic' });
            }
